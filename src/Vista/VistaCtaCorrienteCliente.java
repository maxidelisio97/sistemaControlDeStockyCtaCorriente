/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Modelo.BaseDatos;
import Modelo.Cliente;
import Modelo.CtaCorrienteCliente;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author maxid
 */
public class VistaCtaCorrienteCliente extends javax.swing.JInternalFrame {

    /**
     * Creates new form CtaCorrienteCliente
     */
    DefaultComboBoxModel modeloComboClientes = new DefaultComboBoxModel();
    DefaultTableModel modeloTablaCtaCorrienteClientes = new DefaultTableModel();
    BaseDatos base = new BaseDatos();

    public VistaCtaCorrienteCliente() {
        initComponents();
        cargarClientesEnComboBox();
        cargarColumnasCtaCorrienteClientes();
        lblSumatoriaCtaCorriente.setEditable(false);
        AutoCompleteDecorator.decorate(comboClientes);
        ((javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI()).setNorthPane(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        comboClientes = new javax.swing.JComboBox<>();
        btnNuevoCliente = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCtaCorrienteClientes = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtDebe = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lblSumatoriaCtaCorriente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnIngresarMovimiento = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtFecha = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        txtPago = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1378, 788));

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel11.setText("Cliente");

        comboClientes.setModel(modeloComboClientes       );

        btnNuevoCliente.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        btnNuevoCliente.setText("Nuevo cliente");
        btnNuevoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoClienteActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jButton6.setText("Consultar cta corriente");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        tablaCtaCorrienteClientes.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        tablaCtaCorrienteClientes.setModel(modeloTablaCtaCorrienteClientes);
        tablaCtaCorrienteClientes.setGridColor(new java.awt.Color(204, 204, 204));
        tablaCtaCorrienteClientes.setRowHeight(25);
        tablaCtaCorrienteClientes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tablaCtaCorrienteClientes);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel1.setText("Pagó");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel2.setText("Saldo");

        lblSumatoriaCtaCorriente.setFont(new java.awt.Font("DejaVu Sans", 0, 36)); // NOI18N
        lblSumatoriaCtaCorriente.setForeground(new java.awt.Color(255, 102, 0));
        lblSumatoriaCtaCorriente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lblSumatoriaCtaCorriente.setText("$ 0.00");
        lblSumatoriaCtaCorriente.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblSumatoriaCtaCorriente.setPreferredSize(new java.awt.Dimension(200, 51));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel3.setText("Debe");

        btnIngresarMovimiento.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        btnIngresarMovimiento.setText("Insertar");
        btnIngresarMovimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarMovimientoActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel4.setText("Fecha");

        txtFecha.setBackground(new java.awt.Color(51, 51, 51));
        txtFecha.setDateFormatString("yyyy/MM/dd");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel5.setText("Descripción");

        jButton1.setText("Eliminar registro");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Consultar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(btnNuevoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblSumatoriaCtaCorriente, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnIngresarMovimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(48, 48, 48)
                                    .addComponent(txtDebe))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel1))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtDescripcion)
                                        .addComponent(txtPago)
                                        .addComponent(txtFecha, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4))
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPago, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDebe, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(45, 45, 45)
                .addComponent(btnIngresarMovimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSumatoriaCtaCorriente, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(25, 25, 25)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNuevoCliente)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(0, 118, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoClienteActionPerformed
try{
        String nombre = JOptionPane.showInputDialog("Ingrese el NOMBRE del nuevo cliente");
        String dir = JOptionPane.showInputDialog("Ingrese la DIRECCIÓN del nuevo cliente");
        String cuit = JOptionPane.showInputDialog("Ingrese el CUIT del nuevo cliente");

        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se ha ingresado el nombre", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            Cliente c = new Cliente(nombre, dir, cuit);
            base.insertarCliente(c);
            cargarClientesEnComboBox();
            JOptionPane.showMessageDialog(null, "Se ha registrado a un nuevo cliente", "Nuevo cliente", 1);
        }
}catch(NullPointerException e){
    JOptionPane.showMessageDialog(null, "No ha ingresado nada");
}
    }//GEN-LAST:event_btnNuevoClienteActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        cargarCtaCorrienteCliente();
     
    }//GEN-LAST:event_jButton6ActionPerformed

    private void btnIngresarMovimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarMovimientoActionPerformed

        int filas = modeloTablaCtaCorrienteClientes.getRowCount();
        if (filas == 0) {
            insertarMovimientoEnCtaCorriente();
        } else {
            ActualizarCuentaCorriente();
        }
        txtDebe.setText("");
        txtPago.setText("");
    }//GEN-LAST:event_btnIngresarMovimientoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int numFilas = tablaCtaCorrienteClientes.getSelectedRow();
        int filaSelec = modeloTablaCtaCorrienteClientes.getRowCount();
        if (filaSelec > 0) {
            int quitar = JOptionPane.showConfirmDialog(this, "¿ Desea eliminar el registro seleccionado ?");
            if (quitar == 0) {
                if (numFilas == -1) {
                    JOptionPane.showMessageDialog(this, "Debe seleccionar el registro que desea quitar", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    CtaCorrienteCliente cta = (CtaCorrienteCliente) modeloTablaCtaCorrienteClientes.getValueAt(tablaCtaCorrienteClientes.getSelectedRow(), 1);
                    base.eliminarFilaCtaCorrienteCliente(cta);

                    cargarCtaCorrienteCliente();
                }
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String fechaEnString = sdf.format(txtFecha.getDate());
            java.util.Date fechaEnDate = sdf.parse(fechaEnString);
            java.sql.Date date1 = new java.sql.Date(fechaEnDate.getTime());           
            String fechaDeHoy = sdf.format(new Date().getTime());
            java.util.Date fechaEnDate2 = sdf.parse(fechaDeHoy);
            java.sql.Date date2 = new java.sql.Date(fechaEnDate2.getTime());  
            int idCliente = comboClientes.getSelectedIndex() +1;
            ArrayList<CtaCorrienteCliente> lista = base.ctaCorrienteClientePorFechas(idCliente,date1, date2);
            int numeroCta = lista.size();
            modeloTablaCtaCorrienteClientes.setNumRows(numeroCta);
            
            for (int i = 0; i < numeroCta; i++) {
                
                CtaCorrienteCliente cta = lista.get(i);
                int idCta = cta.getIdCtaCliente();
                Date fecha = cta.getFecha();
                String descripcion = cta.getDescripcion();
                double debe = cta.getDebe();
                double haber = cta.getHaber();
                double saldo = cta.getSaldo();
                int id_Cliente = cta.getIdCliente();
                
                modeloTablaCtaCorrienteClientes.setValueAt(fecha, i, 0);
                modeloTablaCtaCorrienteClientes.setValueAt(cta, i, 1);
                modeloTablaCtaCorrienteClientes.setValueAt(debe, i, 2);
                modeloTablaCtaCorrienteClientes.setValueAt(haber, i, 3);
                modeloTablaCtaCorrienteClientes.setValueAt(saldo, i, 4);
                
            }
            /*   double sumatoria = getSaldoCtaCorriente();
            lblSumatoriaCtaCorriente.setText(String.valueOf(sumatoria));*/
        } catch (ParseException ex) {
            Logger.getLogger(VistaCtaCorrienteCliente.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIngresarMovimiento;
    public javax.swing.JButton btnNuevoCliente;
    public javax.swing.JComboBox<String> comboClientes;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lblSumatoriaCtaCorriente;
    private javax.swing.JTable tablaCtaCorrienteClientes;
    private javax.swing.JTextField txtDebe;
    private javax.swing.JTextField txtDescripcion;
    public com.toedter.calendar.JDateChooser txtFecha;
    private javax.swing.JTextField txtPago;
    // End of variables declaration//GEN-END:variables

    private void cargarColumnasCtaCorrienteClientes() {

        modeloTablaCtaCorrienteClientes.addColumn("Fecha");
        modeloTablaCtaCorrienteClientes.addColumn("Descripción");
        modeloTablaCtaCorrienteClientes.addColumn("Debe");
        modeloTablaCtaCorrienteClientes.addColumn("Pagó");
        modeloTablaCtaCorrienteClientes.addColumn("Saldo");

        TableColumn ColFecha = tablaCtaCorrienteClientes.getColumn("Fecha");
        TableColumn ColDesc = tablaCtaCorrienteClientes.getColumn("Descripción");
        TableColumn ColDebe = tablaCtaCorrienteClientes.getColumn("Debe");
        TableColumn ColHaber = tablaCtaCorrienteClientes.getColumn("Pagó");
        TableColumn ColSaldo = tablaCtaCorrienteClientes.getColumn("Saldo");

        ColFecha.setMaxWidth(170);
        ColFecha.setMinWidth(10);

        ColDesc.setMaxWidth(550);
        ColDesc.setMinWidth(10);

        ColDebe.setMaxWidth(120);
        ColDebe.setMinWidth(10);

        ColHaber.setMaxWidth(120);
        ColHaber.setMinWidth(10);

        ColSaldo.setMaxWidth(120);
        ColSaldo.setMinWidth(10);

    }

    private void cargarClientesEnComboBox() {

        modeloComboClientes.removeAllElements();
        ArrayList<Cliente> listaClientes = base.getClientes();

        for (Cliente r : listaClientes) {
            modeloComboClientes.addElement(r);

        }
    }

    private void cargarCtaCorrienteCliente() {
        int idCliente = comboClientes.getSelectedIndex() + 1;

        ArrayList<CtaCorrienteCliente> ctaCliente = base.getCtaCorrienteClientePorId(idCliente);
        int numeroCta = ctaCliente.size();
        modeloTablaCtaCorrienteClientes.setNumRows(numeroCta);

        if (numeroCta == 0) {
            JOptionPane.showMessageDialog(null, "El cliente no tiene iniciada una cuenta corriente ");

        } else {

            for (int i = 0; i < numeroCta; i++) {

                CtaCorrienteCliente cta = ctaCliente.get(i);
                int idCta = cta.getIdCtaCliente();
                 java.util.Date fecha = cta.getFecha();
                String descripcion = cta.getDescripcion();
                double debe = cta.getDebe();
                double haber = cta.getHaber();
                double saldo = cta.getSaldo();
                int id_Cliente = cta.getIdCliente();

                modeloTablaCtaCorrienteClientes.setValueAt(fecha, i, 0);
                modeloTablaCtaCorrienteClientes.setValueAt(cta, i, 1);
                modeloTablaCtaCorrienteClientes.setValueAt(debe, i, 2);
                modeloTablaCtaCorrienteClientes.setValueAt(haber, i, 3);
                modeloTablaCtaCorrienteClientes.setValueAt(saldo, i, 4);

            }
            double sumatoria = getSaldoCtaCorriente();
            lblSumatoriaCtaCorriente.setText(String.valueOf(sumatoria));
        }

    }

    private double getSaldoCtaCorriente() {

        int numFilas = modeloTablaCtaCorrienteClientes.getRowCount() - 1;
        double sumatoria = 0;

        double importe = (double) modeloTablaCtaCorrienteClientes.getValueAt(numFilas, 4);
        sumatoria += (importe);

        return sumatoria;

    }

    private void insertarMovimientoEnCtaCorriente() {
        try{
        double debe = 0;
        double saldo = 0;
        double pago = 0;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String fechaEnString = sdf.format(txtFecha.getDate());
         java.util.Date fechaEnDate = sdf.parse(fechaEnString);
          java.sql.Date date2 = new java.sql.Date(fechaEnDate.getTime());
        String descripcion = txtDescripcion.getText();
        String stringDebe = txtDebe.getText();
        String stringPago = txtPago.getText();
        int idCliente = comboClientes.getSelectedIndex() + 1;
        

        if (!stringDebe.isEmpty() && !stringPago.isEmpty()) {
            debe = Double.parseDouble(stringDebe);
             pago = Double.parseDouble(stringPago);
             saldo = debe - pago;
           CtaCorrienteCliente movimientoCta = new CtaCorrienteCliente(date2, descripcion, debe, pago, saldo, idCliente);

            base.insertarCtaCorrienteCliente(movimientoCta);
           
        } else {
            debe = Double.parseDouble(stringDebe);
            saldo += debe;
            CtaCorrienteCliente movimientoCta = new CtaCorrienteCliente(date2, descripcion, debe, pago, saldo, idCliente);

            base.insertarCtaCorrienteCliente(movimientoCta);
        }
        cargarCtaCorrienteCliente();
        double sumatoria = getSaldoCtaCorriente();
        lblSumatoriaCtaCorriente.setText(String.valueOf(sumatoria));   
        }catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "La fecha debe ser ingresada");
        } catch (ParseException ex) {
            Logger.getLogger(VistaCtaCorrienteCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ActualizarCuentaCorriente() {
       try{
        double debe = 0;
        double pago = 0;
        double saldoActualizado = 0;
        int fila = modeloTablaCtaCorrienteClientes.getRowCount() - 1;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String fechaEnString = sdf.format(txtFecha.getDate());
          java.util.Date fechaEnDate = sdf.parse(fechaEnString);
          java.sql.Date date2 = new java.sql.Date(fechaEnDate.getTime());
        String descripcion = txtDescripcion.getText();
        int idCliente = comboClientes.getSelectedIndex() + 1;
        String stringDebe =txtDebe.getText();
        String stringPago = txtPago.getText();
        double saldo = (double) modeloTablaCtaCorrienteClientes.getValueAt(fila, 4);

        if (!stringDebe.isEmpty() && !stringPago.isEmpty()) {
              debe = Double.parseDouble(stringDebe);
             pago = Double.parseDouble(stringPago);
          saldoActualizado = (saldo +debe) - pago;
              CtaCorrienteCliente movimientoCta = new CtaCorrienteCliente(date2, descripcion, debe, pago, saldoActualizado, idCliente);

            base.insertarCtaCorrienteCliente(movimientoCta);
        } else if ( !stringPago.isEmpty()) {
               pago = Double.parseDouble(stringPago);
            saldoActualizado = saldo - pago;
            CtaCorrienteCliente movimientoCta = new CtaCorrienteCliente(date2, descripcion, debe, pago, saldoActualizado, idCliente);

            base.insertarCtaCorrienteCliente(movimientoCta);
        } else if (!stringDebe.isEmpty()) {
             debe = Double.parseDouble(stringDebe);
            saldoActualizado = saldo + debe;
            CtaCorrienteCliente movimientoCta = new CtaCorrienteCliente(date2, descripcion, debe, pago, saldoActualizado, idCliente);

            base.insertarCtaCorrienteCliente(movimientoCta);
        }
        cargarCtaCorrienteCliente();       
        double sumatoria = getSaldoCtaCorriente();
        lblSumatoriaCtaCorriente.setText(String.valueOf(sumatoria));
       }catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "La fecha debe ser ingresada");
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Carácter inválido","Error",JOptionPane.ERROR_MESSAGE);
        } catch (ParseException ex) {
            Logger.getLogger(VistaCtaCorrienteCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
